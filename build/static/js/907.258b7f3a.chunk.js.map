{"version":3,"file":"static/js/907.258b7f3a.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["\r\nimport img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\r\n        <img src={img} alt=\"error\" style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method='GET', body=null, headers={'Content-Type': 'application/json'} ) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if (!response.ok) {\r\n                throw new Error(`could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=306ddbd3eb237321921615cd03d15659';\r\n    const _baseOffset = 210;\r\n\r\n    // getResource = async (url) => {\r\n    //     let res = await fetch(url);\r\n\r\n    //     if (!res.ok) {\r\n    //         throw new Error(`could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n\r\n    //     return await res.json();\r\n    // }\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics,};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComics"],"sourceRoot":""}